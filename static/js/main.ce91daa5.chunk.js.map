{"version":3,"sources":["utility/variables.js","utility/functions.js","components/Tooltip/Tooltip.js","components/ThemeToggle/ThemeToggle.js","components/Popup/Popup.js","components/StatsCard/StatsCard.js","components/Map/Map.js","components/Table/Table.js","components/LineChart/LineChart.js","components/App/App.js","index.js"],"names":["DATA_OBJ","userPreferences","theme","COVID_URL","mapData","changeTheme","newTheme","document","documentElement","setAttribute","querySelectorAll","forEach","element","getComputedStyle","body","backgroundColor","url","getAttribute","split","length","join","data","JSON","parse","localStorage","getItem","setItem","stringify","getData","a","fetch","response","json","console","error","sortData","sortedData","sort","b","cases","useStyles","makeStyles","arrow","color","palette","common","black","tooltip","Tooltip","props","classes","enterDelay","leaveDelay","ThemeToggle","setTheme","title","IconButton","className","aria-label","onClick","e","preventDefault","modal","display","alignItems","justifyContent","Popup","btnTip","btnContent","modalContent","React","useState","open","setOpen","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Card","CardContent","StatsCard","country","total","active","caseType","updated","toLowerCase","Button","numeral","format","Date","toLocaleString","Map","mapRef","center","countries","corner1","Leaflet","latLng","corner2","bounds","latLngBounds","ref","zoom","minZoom","maxZoom","maxBoundsViscosity","maxBounds","TileLayer","attribution","calcRadius","amount","multiplier","radius","Math","sqrt","caseTypeColors","recovered","deaths","circles","map","Circle","countryInfo","lat","long","fillOpacity","fillColor","style","backgroundImage","flag","showCirclesOnMap","Table","i","key","options","responsive","maintainAspectRatio","elements","point","legend","tooltips","mode","intersect","titleFontFamily","getPropertyValue","trim","bodyFontFamily","callbacks","label","tooltipItem","value","scales","xAxes","type","time","parser","tooptipFormat","ticks","yAxes","gridLines","callback","index","values","constructChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","generateActiveCases","LineChart","caseTypes","setData","useEffect","setChartData","lineChartColors","borderColor","activecase","defaults","global","defaultFontColor","defaultFontFamily","Object","keys","datasets","App","setCountry","setCountryInfo","setCountries","tableData","setTableData","setCaseType","useRef","mapCenter","setMapCenter","mapCountries","setMapCountries","setWorldwideInfo","setCountriesInfo","countriesData","name","iso3","mapFlyTo","current","leafletElement","flyTo","duration","initTheme","countryChangeHandler","countryCode","target","lng","href","window","location","textAlign","marginTop","variant","startIcon","FormControl","Select","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","toUpperCase","slice","ReactDOM","render","StrictMode","getElementById"],"mappings":"ooBAKaA,EAAW,CACpBC,gBAAiB,CACbC,MAAO,UAMFC,EAAY,iCAMZC,EACC,EADDA,EAEE,EAFFA,EAGA,EAHAA,EAIA,GAJAA,EAKA,GALAA,EAMA,GANAA,EAOI,ICvBJC,EAAc,SAACC,GACxBC,SAASC,gBAAgBC,aAAa,QAASH,GAC/CC,SAASG,iBAAiB,6BAA6BC,SAAS,SAAAC,GAAO,OAAIA,EAAQH,aAAa,UAAWI,iBAAiBN,SAASO,MAAMC,oBAC3IR,SAASG,iBAAiB,kBAAkBC,SAAS,SAAAC,GACjD,IAAMI,EAAMJ,EAAQK,aAAa,QAAQC,MAAM,KAC/CF,EAAIA,EAAIG,OAAS,GAAjB,eAA8Bb,EAA9B,YACAM,EAAQH,aAAa,OAAQO,EAAII,KAAK,SAG1C,IAAMC,EAAOC,KAAKC,MAAMC,aAAaC,QDVd,qBCWvBJ,EAAKpB,gBAAgBC,MAAQI,EAC7BkB,aAAaE,QDZU,mBCYWJ,KAAKK,UAAUN,KAGxCO,EAAO,uCAAG,WAAOZ,GAAP,iBAAAa,EAAA,+EAEQC,MAAMd,GAFd,cAETe,EAFS,gBAGIA,EAASC,OAHb,cAGTX,EAHS,yBAIRA,GAJQ,yCAMfY,QAAQC,MAAR,gEAAuElB,EAAvE,aANe,kBAOR,MAPQ,0DAAH,sDAWPmB,EAAW,SAACd,GACrB,IAAMe,EAAU,YAAOf,GAEvB,OADAe,EAAWC,MAAK,SAACR,EAAGS,GAAJ,OAAWT,EAAEU,MAAQD,EAAEC,OAAS,EAAI,KAC7CH,G,kBCtBLI,G,OAAYC,aAAY,SAACvC,GAAD,MAAY,CACtCwC,MAAO,CACHC,MAAOzC,EAAM0C,QAAQC,OAAOC,OAEhCC,QAAS,CACLhC,gBAAiBb,EAAM0C,QAAQC,OAAOC,YAiB/BE,EAbC,SAACC,GACb,IAAMC,EAAUV,IAEhB,OAAO,kBAAC,IAAD,eACKE,OAAK,EACLS,WAAY,IACZC,WAAY,EAEZF,QAASA,GACLD,KCELI,G,OAlBK,SAAC,GAAyB,IAAvBnD,EAAsB,EAAtBA,MAAOoD,EAAe,EAAfA,SAS1B,OACI,kBAAC,EAAD,CAASC,MAAK,oBAAyB,UAAVrD,EAAoB,OAAS,QAA5C,WACV,kBAACsD,EAAA,EAAD,CAAYC,UAAU,yCAAyCC,aAAW,eAAeC,QAV7E,SAACC,GACjBA,EAAEC,iBACF,IAAMvD,EAAqB,UAAVJ,EAAoB,OAAS,QAE9CG,EAAYC,GACZgD,EAAShD,KAMW,UAAVJ,EAAoB,kBAAC,IAAD,MAAsB,kBAAC,IAAD,U,2BCXtDsC,G,OAAYC,aAAY,iBAAO,CACjCqB,MAAO,CACHC,QAAS,OACTC,WAAY,SACZC,eAAgB,eA6CTC,EAxCD,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC3BnB,EAAUV,IADoC,EAE5B8B,IAAMC,UAAS,GAFa,mBAE7CC,EAF6C,KAEvCC,EAFuC,KAQpD,OACI,oCACI,kBAAC,EAAD,CAASlB,MAAOY,GACZ,yBAAKV,UAAU,YAAYE,QAPrB,WAAQc,GAAQ,KAQhBL,IAGV,kBAACM,EAAA,EAAD,CACIC,kBAAgB,oBAChBC,mBAAiB,mBACjBnB,UAAWP,EAAQY,MAAM,gBACzBU,KAAMA,EACNK,QAfO,WAAQJ,GAAQ,IAgBvBK,sBAAoB,EACpBC,kBAAmBC,IACnBC,cAAe,CACXC,QAAS,MAGb,kBAACC,EAAA,EAAD,CAAMC,GAAIZ,GACN,kBAACa,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAI7B,UAAU,qBAAqBY,EAAad,OAChD,yBAAKE,UAAU,oBAAoBY,EAAavD,Y,iBCT7DyE,G,OAjCG,SAAC,GAA0E,IAAxEC,EAAuE,EAAvEA,QAASjC,EAA8D,EAA9DA,MAAOhB,EAAuD,EAAvDA,MAAOkD,EAAgD,EAAhDA,MAAO9B,EAAyC,EAAzCA,QAAS+B,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAE1E,OACI,kBAAC,EAAD,CAASrC,MAAK,oBAAeA,EAAMsC,cAArB,kBAAwD,cAAZL,EAA0B,mBAAqB,MAAMA,IAC3G,kBAACM,EAAA,EAAD,CAAQnC,QAASA,EAASF,UAAS,qBAAgBkC,EAAhB,YAA4BD,EAAS,qBAAuB,KAC3F,kBAACL,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,uBAAG7B,UAAU,qBACRF,GAGL,wBAAIE,UAAU,qBACTsC,IAAQN,GAAOO,OAAO,SAG3B,uBAAGvC,UAAU,qBAELlB,EACIA,EAAQ,EAAI,IAAMwD,IAAQxD,GAAOyD,OAAO,QAAUD,IAAQxD,GAAOyD,OAAO,QAC1E,MAIV,uBAAGvC,UAAU,uBACP,IAAIwC,KAAKL,GAASM,wB,yDCyEjCC,I,cA/BH,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,OAAQlG,EAAyC,EAAzCA,MAAOmG,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,UAAWX,EAAe,EAAfA,SAIvCY,EAAUC,IAAQC,QAAQ,KAAM,KAChCC,EAAUF,IAAQC,OAAO,IAAK,KAC9BE,EAASH,IAAQI,aAAaL,EAASG,GAE7C,OACI,kBAACrB,EAAA,EAAD,CAAM5B,UAAU,OACZ,kBAAC,KAAD,CACIoD,IAAKT,EACLC,OAAQA,EACRS,KAAM1G,EACN2G,QAAS3G,EACT4G,QAAS5G,EACT6G,mBAAoB,GACpBC,UAAWP,GAEX,kBAACQ,GAAA,EAAD,CACInG,IAAe,UAAVd,EAnBJ,qDACD,8EAmBAkH,YAAY,2EAIdd,EAAUnF,QA1FI,SAACE,GAA8B,IAAxBsE,EAAuB,uDAAZ,QACxC0B,EAAa,SAACC,EAAQC,GACxB,IAAMC,EAASC,KAAKC,KAAKJ,GAAUC,EAGnC,OAAOC,EAFa,QAESA,EAFD,QAEsBA,GAGhDG,EAAiB,CACnBpF,MAAO,CACHI,MAAO,aACP4E,WAAY,KAEhB7B,OAAQ,CACJ/C,MAAO,cACP4E,WAAY,KAEhBK,UAAW,CACPjF,MAAO,eACP4E,WAAY,KAEhBM,OAAQ,CACJlF,MAAO,eACP4E,WAAY,MAIpB,GAAIlG,EAAM,CACNsE,EAAwB,eAAbA,EAA4B,SAAWA,EAElD,IAAMmC,EAAUzG,EAAK0G,KAAK,SAAAvC,GAAO,OAC7B,kBAACwC,GAAA,EAAD,CACI3B,OAAQ,CACJb,EAAQyC,YAAczC,EAAQyC,YAAYC,IAAM9H,EAChDoF,EAAQyC,YAAczC,EAAQyC,YAAYE,KAAO/H,GAErDgI,YAAa,GACbC,UAAWV,EAAehC,GAAUhD,MACpCA,MAAOgF,EAAehC,GAAUhD,MAChC6E,OAAQH,EAAW7B,EAAQG,GAAWgC,EAAehC,GAAU4B,aAE/D,kBAAC,KAAD,KACI,yBAAK9D,UAAU,kBACX,yBACIA,UAAU,YACV6E,MAAO,CAAEC,gBAAgB,OAAD,OAAS/C,EAAQyC,YAAYO,KAA7B,QAE5B,yBAAK/E,UAAU,aAAa+B,EAAQA,SACpC,yBAAK/B,UAAU,cAAf,WAAqCsC,IAAQP,EAAO,OAAWQ,OAAO,QACtE,yBAAKvC,UAAU,mBAAf,YACcsC,IAAQP,EAAO,QAAYQ,OAAO,QAEhD,yBAAKvC,UAAU,kBAAf,eACiBsC,IAAQP,EAAO,WAAeQ,OAAO,QAEtD,yBAAKvC,UAAU,eAAf,YAAuCsC,IAAQP,EAAO,QAAYQ,OAAO,cAKzF,OAAO8B,GA8BwBW,CAAiBnC,EAAWX,OC7EpD+C,I,OAlBD,SAAC,GAA0B,IAAxBnF,EAAuB,EAAvBA,MAAO+C,EAAgB,EAAhBA,UACpB,OACI,yBAAK7C,UAAU,cACX,4BAAKF,GACL,+BACI,+BACM+C,EAAUyB,KAAI,WAAqBY,GAArB,IAAGnD,EAAH,EAAGA,QAASjD,EAAZ,EAAYA,MAAZ,OACZ,wBAAIqG,IAAKD,GACL,4BAAKnD,GACL,4BAAKO,IAAQxD,GAAOyD,OAAO,iB,SCNjD6C,I,OAAU,CACZC,YAAY,EACZC,qBAAqB,EACrBC,SAAU,CACNC,MAAO,CACHzB,OAAQ,IAGhB0B,OAAQ,CACJnF,SAAS,GAEboF,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,gBAAiBzI,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,aAAaC,OAC1FC,eAAgB5I,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,aAAaC,OACzFE,UAAW,CACPC,MAAO,SAACC,EAAavI,GAAd,OAAuB0E,IAAQ6D,EAAYC,OAAO7D,OAAO,WAGxE8D,OAAQ,CACJC,MAAO,CAAC,CACJC,KAAM,OACNC,KAAM,CACFC,OAAQ,aACRC,cAAe,MAEnBC,MAAO,KAKXC,MAAO,CAAC,CACJC,UAAW,CACPvG,SAAS,GAEbqG,MAAO,CACHG,SAAU,SAACV,EAAOW,EAAOC,GAAf,OAA0B1E,IAAQ8D,GAAO7D,OAAO,aAQpE0E,GAAqB,SAACrJ,GAA8B,IAElDsJ,EAF0BhF,EAAuB,uDAAZ,QACrCiF,EAAY,GAGhB,IAAM,IAAMC,KAAQxJ,EAAKsE,GAAY,CACjC,GAAKgF,EAAgB,CACjB,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAG3J,EAAKsE,GAAUkF,GAAQF,GAE9BC,EAAUK,KAAKH,GAEnBH,EAAgBtJ,EAAKsE,GAAUkF,GAEnC,OAAOD,GAELM,GAAsB,SAAC7J,GACzB,IAAMqE,EAAS,GACf,IAAM,IAAMmF,KAAQxJ,EAAI,MACpBqE,EAAOmF,GAAQxJ,EAAI,MAAUwJ,GAAQxJ,EAAI,UAAcwJ,GAAQxJ,EAAI,OAAWwJ,GAElF,OAAOnF,GA+DIyF,GA5DG,SAAC,GAAoC,IAAlC5H,EAAiC,EAAjCA,MAAiC,IAA1B6H,iBAA0B,MAAd,QAAc,IAC1B7G,mBAAS,IADiB,mBAC3ClD,EAD2C,KACrCgK,EADqC,KAGlDC,qBAAU,YACY,uCAAG,4BAAAzJ,EAAA,sEACED,EAAQ,GAAD,OAAIzB,EAAJ,iCADT,OACXkB,EADW,OAGE,eAAd+J,IAGD/J,EADA+J,EAAY,UACMF,GAAoB7J,IAE1CgK,EAAQX,GAAmBrJ,EAAM+J,IARhB,2CAAH,qDAUlBG,KACD,CAACH,IAEJ,IAAMI,EAAkB,CACpBjJ,MAAO,CACHkJ,YAAa5K,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,SAASC,OAClFzI,gBAAiBF,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,SAASC,OAAS,MAEnGkC,WAAY,CACRD,YAAa5K,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,UAAUC,OACnFzI,gBAAiBF,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,UAAUC,OAAS,MAEpG5B,UAAW,CACP6D,YAAa5K,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,WAAWC,OACpFzI,gBAAiBF,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,WAAWC,OAAS,MAErG3B,OAAQ,CACJ4D,YAAa5K,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,WAAWC,OACpFzI,gBAAiBF,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,WAAWC,OAAS,OAQzG,OAJAmC,YAASC,OAAOC,iBAAmBhL,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,iBAAiBC,OAChHmC,YAASC,OAAOE,kBAAoBjL,iBAAiBN,SAASC,iBAAiB+I,iBAAiB,aAAaC,OAIzG,yBAAK/F,UAAU,cACX,4BAAKF,GAEHlC,GAAQ0K,OAAOC,KAAK3K,GAAMF,OAAS,GACjC,kBAAC,QAAD,CACIE,KAAM,CACF4K,SAAU,CAAC,CACHR,YAA6BD,EAAgBJ,GAAWK,YACxD1K,gBAAiCyK,EAAgBJ,GAAWrK,gBAC5DM,KAAMA,KAGlBwH,QAASA,OCkEdqD,I,OA/KH,WAAM,MAEY3H,mBAAS,SAFrB,mBAEPrE,EAFO,KAEAoD,EAFA,OAIgBiB,mBAAS,aAJzB,mBAIPiB,EAJO,KAIE2G,EAJF,OAKwB5H,mBAAS,IALjC,mBAKP0D,EALO,KAKMmE,EALN,OAMoB7H,mBAAS,IAN7B,mBAMP+B,EANO,KAMI+F,EANJ,OAOoB9H,mBAAS,IAP7B,mBAOP+H,EAPO,KAOIC,EAPJ,OAQkBhI,mBAAS,SAR3B,mBAQPoB,EARO,KAQG6G,EARH,KAURpG,EAASqG,mBAVD,EAWoBlI,mBAAS,CAACnE,EAAiBA,IAX/C,mBAWPsM,EAXO,KAWIC,GAXJ,QAY0BpI,mBAAS,IAZnC,qBAYPqI,GAZO,MAYOC,GAZP,MA0BRC,GAAgB,uCAAG,4BAAAjL,EAAA,sEACFD,EAAQ,GAAD,OAAIzB,EAAJ,SADL,OACfkB,EADe,OAErB+K,EAAe/K,GAFM,2CAAH,qDAIhB0L,GAAgB,uCAAG,8BAAAlL,EAAA,sEACFD,EAAQ,GAAD,OAAIzB,EAAJ,eADL,OACfkB,EADe,OAEf2L,EAAgB3L,EAAK0G,KAAK,SAAAvC,GAAO,MAAK,CACxCyH,KAAMzH,EAAQA,QACdqE,MAAOrE,EAAQyC,YAAYiF,SAE/Bb,EAAaW,GACbT,EAAapK,EAASd,IACtBwL,GAAgBxL,GARK,2CAAH,qDAUhB8L,GAAW,SAAC9G,GAAsC,IAA9BS,EAA6B,uDAAtB1G,EAAsB,EAC1BgG,EAAjBgH,eAD2C,MACjC,GADiC,EAE3BrF,EAAQqF,EAAxBC,eAERtF,EAAIuF,MAAMjH,EAAQS,EAAM,CAAEyG,SAAUnN,KAGxCkL,qBAAU,YAhCQ,WACd,IAAIjK,EAAOC,KAAKC,MAAMC,aAAaC,QTpChB,qBSsCbJ,IACFA,EAAOrB,EACPwB,aAAaE,QTxCE,mBSwCmBJ,KAAKK,UAAUN,KAGrDhB,EAAYgB,EAAKpB,gBAAgBC,OACjCoD,EAASjC,EAAKpB,gBAAgBC,OAwB9BsN,GACAV,KACAC,KAEAJ,GAAa,CAACvM,EAAiBA,MAChC,IAGH,IAAMqN,GAAoB,uCAAG,WAAO7J,GAAP,2BAAA/B,EAAA,6DACnB6L,EAAc9J,EAAE+J,OAAO9D,MACvB7I,EAAsB,cAAhB0M,EAAA,UAAiCvN,EAAjC,kBAAsDA,EAAtD,sBAA6EuN,GAFhE,SAGN9L,EAAQZ,GAHF,OAGnBK,EAHmB,SAINA,EAAK4G,YAAc,CAAC5G,EAAK4G,YAAYC,IAAK7G,EAAK4G,YAAYE,MAAQ,CAAC/H,EAAiBA,GAJ/E,mBAIlB8H,EAJkB,KAIb0F,EAJa,KAMzBxB,EAAe/K,GACf8K,EAAWuB,GACU,cAAhBA,EAA8BP,GAAS,CAACjF,EAAK0F,GAAM,GACnDT,GAAS,CAACjF,EAAK0F,IATK,2CAAH,sDAY1B,OACI,oCACI,yBAAKnK,UAAU,aACX,yBAAKA,UAAU,eACX,uBAAGoK,KAAMC,OAAOC,SAASF,KAAMpK,UAAU,qBACrC,gCAAK,0BAAMA,UAAU,wBAAhB,UAAL,eAGJ,yBAAKA,UAAU,wBACX,kBAACD,EAAA,EAAD,CAAYC,UAAU,qCAAqCC,aAAW,kBAClE,kBAAC,EAAD,CACIS,OAAO,yBACPC,WAAY,kBAAC,IAAD,MACZC,aAAe,CACXd,MAAO,yBACPzC,KAAM,oCACF,wOACA,yBAAKwH,MAAO,CAAC0F,UAAW,SAAUC,UAAW,SACzC,uBAAGJ,KAAK,oDACJ,kBAAC/H,EAAA,EAAD,CACIoI,QAAQ,YACRC,UAAW,kBAAC,IAAD,OAFf,gCAaxB,kBAAC,EAAD,CAAajO,MAAOA,EAAOoD,SAAUA,IAErC,kBAAC8K,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQxE,MAAOrE,EAAS0I,QAAQ,WAAWI,SAAUb,IACjD,kBAACc,EAAA,EAAD,CAAU1E,MAAM,aAAhB,aACCvD,EAAUyB,KAAK,SAAAvC,GAAO,OACnB,kBAAC+I,EAAA,EAAD,CAAU1E,MAAOrE,EAAQqE,OAAQrE,EAAQyH,aAM7D,yBAAKxJ,UAAU,cACX,kBAAC,EAAD,CACI+B,QAASyC,EAAYzC,SAAW,YAChCjC,MAAM,YACNmC,OAAqB,UAAbC,EACRpD,MAAO0F,EAAYuG,WACnB/I,MAAOwC,EAAY1F,MACnBoD,SAAS,QACTC,QAASqC,EAAYrC,QACrBjC,QAAS,kBAAM6I,EAAY,YAE/B,kBAAC,EAAD,CACIhH,QAASyC,EAAYzC,SAAW,YAChCjC,MAAM,SACNmC,OAAqB,eAAbC,EACRpD,MAAO0F,EAAYuG,WAAavG,EAAYwG,eAAiBxG,EAAYyG,YACzEjJ,MAAOwC,EAAYvC,OACnBC,SAAS,aACTC,QAASqC,EAAYrC,QACrBjC,QAAS,kBAAM6I,EAAY,iBAE/B,kBAAC,EAAD,CACIhH,QAASyC,EAAYzC,SAAW,YAChCjC,MAAM,YACNmC,OAAqB,cAAbC,EACRpD,MAAO0F,EAAYwG,eACnBhJ,MAAOwC,EAAYL,UACnBjC,SAAS,YACTC,QAASqC,EAAYrC,QACrBjC,QAAS,kBAAM6I,EAAY,gBAE/B,kBAAC,EAAD,CACIhH,QAASyC,EAAYzC,SAAW,YAChCjC,MAAM,SACNmC,OAAqB,WAAbC,EACRpD,MAAO0F,EAAYyG,YACnB/I,SAAS,SACTF,MAAOwC,EAAYJ,OACnBjC,QAASqC,EAAYrC,QACrBjC,QAAS,kBAAM6I,EAAY,cAInC,kBAAC,GAAD,CACIpG,OAAQA,EACRlG,MAAOA,EACPmG,OAAQqG,EACRpG,UAAWsG,GACXjH,SAAUA,KAIlB,kBAACN,EAAA,EAAD,CAAM5B,UAAU,cACZ,kBAAC6B,EAAA,EAAD,KACI,kBAAC,GAAD,CAAO/B,MAAO,wBAAyB+C,UAAWgG,IAElD,kBAAC,GAAD,CAAW/I,MAAK,cAAsB,eAAboC,EAA4B,eAAiBA,EAAS,GAAGgJ,cAAchJ,EAASiJ,MAAM,IAAMxD,UAAWzF,S,qBCpLpJkJ,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAGJxO,SAASyO,eAAe,U","file":"static/js/main.ce91daa5.chunk.js","sourcesContent":["\r\n// app local storage key\r\nexport const STORAGE_KEY = 'covid-19-tracker';\r\n\r\n// initial local storage data object\r\nexport const DATA_OBJ = {\r\n    userPreferences: {\r\n        theme: 'light'\r\n    }\r\n};\r\n\r\n\r\n// covid-19 API\r\nexport const COVID_URL = 'https://disease.sh/v3/covid-19';\r\n// export const COVID_API_WORLD = 'https://disease.sh/v3/covid-19';\r\n// export const COVID_URL = 'https://disease.sh/v3/covid-19';\r\n\r\n\r\n// leaflet map initial values\r\nexport const mapData = {\r\n    initZoom: 2,\r\n    focusZoom: 5,\r\n    minZoom: 1,\r\n    maxZoom: 16,\r\n    initLat: 25,\r\n    initLng: 10,\r\n    flyDuration: 1.5\r\n};","// import React from 'react';\nimport { STORAGE_KEY } from './variables';\n\nexport const changeTheme = (newTheme) => {\n    document.documentElement.setAttribute('theme', newTheme);\n    document.querySelectorAll('.mobile-address-bar-color').forEach( element => element.setAttribute('content', getComputedStyle(document.body).backgroundColor) );\n    document.querySelectorAll('.shortcut-icon').forEach( element => {\n        const url = element.getAttribute('href').split('/');\n        url[url.length - 1] = `icon-${newTheme}-192.png`;\n        element.setAttribute('href', url.join('/'));\n    });\n    \n    const data = JSON.parse(localStorage.getItem(STORAGE_KEY));\n    data.userPreferences.theme = newTheme;\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n}\n\nexport const getData = async (url) => {\n    try {\n        const response = await fetch(url);\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error(`Notice! an error occurred while getting the data from ${url}.\\n`, error);\n        return null;\n    }\n}\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n    sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n    return sortedData;\n}\n\n","import React from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Tooltip as MUITooltip } from '@material-ui/core';\n// import Zoom from '@material-ui/core/Zoom';\n\nimport './Tooltip.css'\n\n\nconst useStyles = makeStyles( (theme) => ({\n    arrow: {\n        color: theme.palette.common.black,\n    },\n    tooltip: {\n        backgroundColor: theme.palette.common.black,\n    },\n}));\n\nconst Tooltip = (props) => {\n    const classes = useStyles();\n\n    return <MUITooltip\n                arrow\n                enterDelay={800}\n                leaveDelay={0}\n                // TransitionComponent={Zoom}\n                classes={classes}\n                {...props}\n            />;\n}\n\nexport default Tooltip;\n","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\n\r\nimport { changeTheme } from '../../utility/functions';\r\n\r\nimport Tooltip from '../Tooltip/Tooltip';\r\n\r\nimport './ThemeToggle.css';\r\n\r\nconst ThemeToggle = ({ theme, setTheme }) => {\r\n    const toggleTheme = (e) => {\r\n        e.preventDefault();\r\n        const newTheme = theme === 'light' ? 'dark' : 'light';\r\n\r\n        changeTheme(newTheme);\r\n        setTheme(newTheme);\r\n    }\r\n\r\n    return (\r\n        <Tooltip title={`Switch to ${theme === 'light' ? 'dark' : 'light'} theme`}>\r\n            <IconButton className=\"app__header--options--btn theme-toggle\" aria-label=\"change-theme\" onClick={toggleTheme}>\r\n                { theme === 'light' ? <Brightness4Icon /> : <Brightness7Icon /> }\r\n            </IconButton>\r\n        </Tooltip>\r\n    )\r\n};\r\n\r\nexport default ThemeToggle;","import React from 'react';\nimport { Card, CardContent } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport Fade from '@material-ui/core/Fade';\n\nimport Tooltip from '../Tooltip/Tooltip';\n\nimport './Popup.css';\n\n\nconst useStyles = makeStyles( () => ({\n    modal: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n}));\n\n\nconst Popup = ({ btnTip, btnContent, modalContent }) => {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const openModal = () => { setOpen(true) };\n    const closeModal = () => { setOpen(false) };\n\n\n    return (\n        <>\n            <Tooltip title={btnTip}>\n                <div className='popup-btn' onClick={openModal}>\n                    { btnContent }\n                </div>\n            </Tooltip>\n            <Modal\n                aria-labelledby='popup-modal-title'\n                aria-describedby='popup-modal-body'\n                className={classes.modal+' popup__modal'}\n                open={open}\n                onClose={closeModal}\n                closeAfterTransition\n                BackdropComponent={Backdrop}\n                BackdropProps={{\n                    timeout: 500,\n                }}\n            >\n                <Fade in={open} >\n                    <Card>\n                        <CardContent>\n                            <h2 className='popup-modal-title'>{modalContent.title}</h2>\n                            <div className='popup-modal-body'>{modalContent.body}</div>\n                        </CardContent>\n                    </Card>\n                </Fade>\n            </Modal>\n        </>\n    );\n}\n\nexport default Popup;","import React from 'react';\nimport { Button, Card, CardContent } from '@material-ui/core';\nimport numeral from 'numeral';\n\nimport Tooltip from '../Tooltip/Tooltip';\n\nimport './StatsCard.css';\n\n\n\nconst StatsCard = ({ country, title, cases, total, onClick, active, caseType, updated }) => {\n\n    return (\n        <Tooltip title={`The total ${title.toLowerCase()} cases ${country === 'worldwide' ? 'around the world' : 'in '+country}`}>\n            <Button onClick={onClick} className={`stats-card ${caseType} ${active ? 'stats-card__active' : ''}`}>\n                <Card>\n                    <CardContent>\n                        <p className=\"stats-card__title\">\n                            {title}\n                        </p>\n\n                        <h2 className=\"stats-card__cases\">\n                            {numeral(total).format(\"0.0a\")}\n                        </h2>\n                        \n                        <p className=\"stats-card__total\">\n                            {\n                                cases\n                                ? ( cases > 0 ? \"+\" + numeral(cases).format(\"0.0a\") : numeral(cases).format(\"0.0a\") )\n                                : \"+0\"\n                            }\n                        </p>\n                        \n                        <p className=\"stats-card__updated\">\n                            { new Date(updated).toLocaleString() }\n                        </p>\n                    </CardContent>\n                </Card>\n            </Button>\n        </Tooltip>\n    )\n}\n\nexport default StatsCard\n","import React from 'react';\nimport { Card } from '@material-ui/core';\nimport Leaflet from 'leaflet';\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport numeral from 'numeral';\n\nimport { mapData } from '../../utility/variables';\n\nimport './Map.css';\n\nexport const showCirclesOnMap = (data, caseType = 'cases') => {\n    const calcRadius = (amount, multiplier) => {\n        const radius = Math.sqrt(amount) * multiplier;\n        const [min, max] = [10_000, 100_000_000];\n\n        return radius < min ? min : (radius > max ? max : radius);\n    }\n\n    const caseTypeColors = {\n        cases: {\n            color: 'var(--red)',\n            multiplier: 300,\n        },\n        active: {\n            color: 'var(--blue)',\n            multiplier: 350,\n        },\n        recovered: {\n            color: 'var(--green)',\n            multiplier: 300,\n        },\n        deaths: {\n            color: 'var(--black)',\n            multiplier: 900,\n        },\n    };\n\n    if (data) {\n        caseType = caseType === 'activecase' ? 'active' : caseType;\n\n        const circles = data.map( country => (\n            <Circle\n                center={[\n                    country.countryInfo ? country.countryInfo.lat : mapData.initLat,\n                    country.countryInfo ? country.countryInfo.long : mapData.initLng,\n                ]}\n                fillOpacity={0.4}\n                fillColor={caseTypeColors[caseType].color}\n                color={caseTypeColors[caseType].color}\n                radius={calcRadius(country[caseType], caseTypeColors[caseType].multiplier)}\n            >\n                <Popup>\n                    <div className='info-container'>\n                        <div\n                            className='info-flag'\n                            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n                        ></div>\n                        <div className='info-name'>{country.country}</div>\n                        <div className='info-cases'>Cases : {numeral(country['cases']).format('0,0')}</div>\n                        <div className='info-activecase'>\n                            Active : {numeral(country['active']).format('0,0')}\n                        </div>\n                        <div className='info-recovered'>\n                            Recovered : {numeral(country['recovered']).format('0,0')}\n                        </div>\n                        <div className='info-deaths'>Deaths : {numeral(country['deaths']).format('0,0')}</div>\n                    </div>\n                </Popup>\n            </Circle>\n        ));\n        return circles;\n    }\n}\n\n\nconst Map = ({ mapRef, theme, center, countries, caseType }) => {\n    const lightMap = \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\";\n    const darkMap = \"https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png\";\n\n    const corner1 = Leaflet.latLng(-100, -210);\n    const corner2 = Leaflet.latLng(100, 210);\n    const bounds = Leaflet.latLngBounds(corner1, corner2);\n\n    return (\n        <Card className=\"map\">\n            <LeafletMap\n                ref={mapRef}\n                center={center}\n                zoom={mapData.initZoom}\n                minZoom={mapData.minZoom}\n                maxZoom={mapData.maxZoom}\n                maxBoundsViscosity={0.8}\n                maxBounds={bounds}\n            >\n                <TileLayer\n                    url={theme === 'light' ? lightMap : darkMap}\n                    attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n                >\n                </TileLayer>\n\n                { countries.length && (showCirclesOnMap(countries, caseType)) }\n            </LeafletMap>\n        </Card>\n    )\n};\n\nexport default Map;\n","import React from 'react';\nimport numeral from 'numeral';\n\nimport './Table.css';\n\n\nconst Table = ({ title, countries }) => {\n    return (\n        <div className='data-table'>\n            <h3>{title}</h3>\n            <table>\n                <tbody>\n                    { countries.map(({ country, cases }, i) => (\n                        <tr key={i}>\n                            <td>{country}</td>\n                            <td>{numeral(cases).format('0,0')}</td>\n                        </tr>\n                    )) }\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Table;\n","import React, { useEffect, useState } from 'react';\nimport { Line, defaults } from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nimport { getData } from '../../utility/functions';\nimport { COVID_URL } from '../../utility/variables';\n\nimport './LineChart.css';\n\nconst options = {\n    responsive: true,\n    maintainAspectRatio: true,\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    legend: {\n        display: false,\n    },\n    tooltips: {\n        mode: 'index',\n        intersect: false,\n        titleFontFamily: getComputedStyle(document.documentElement).getPropertyValue('--ff-body').trim(),\n        bodyFontFamily: getComputedStyle(document.documentElement).getPropertyValue('--ff-body').trim(),\n        callbacks: {\n            label: (tooltipItem, data) => numeral(tooltipItem.value).format('+0,0'),\n        },\n    },\n    scales: {\n        xAxes: [{\n            type: 'time',\n            time: {\n                parser: 'MM/DD/YYYY',\n                tooptipFormat: 'll',\n            },\n            ticks: {\n                // fontColor: getComputedStyle(document.documentElement).getPropertyValue('--sheet-txt-c').trim(),\n                // fontFamily: getComputedStyle(document.documentElement).getPropertyValue('--ff-body').trim(),\n            }\n        }],\n        yAxes: [{\n            gridLines: {\n                display: false,\n            },\n            ticks: {\n                callback: (value, index, values) => numeral(value).format('0a'),\n                // fontColor: getComputedStyle(document.documentElement).getPropertyValue('--sheet-txt-c').trim(),\n                // fontFamily: getComputedStyle(document.documentElement).getPropertyValue('--ff-body').trim(),\n            },\n        }],\n    },\n};\n\nconst constructChartData = (data, caseType = 'cases') => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for ( const date in data[caseType] ) {\n        if ( lastDataPoint ) {\n            const newDataPoint = {\n                x: date,\n                y: data[caseType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[caseType][date];\n    }\n    return chartData;\n}\nconst generateActiveCases = (data) => {\n    const active = {};\n    for ( const date in data['cases'] ) {\n        active[date] = data['cases'][date] - data['recovered'][date] - data['deaths'][date];\n    }\n    return active;\n}\n\nconst LineChart = ({ title, caseTypes = 'cases' }) => {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const setChartData = async () => {\n            const data = await getData(`${COVID_URL}/historical/all?lastdays=100`);\n\n            if ( caseTypes === 'activecase' ) {\n                // eslint-disable-next-line react-hooks/exhaustive-deps\n                caseTypes = 'active';\n                data[caseTypes] = generateActiveCases(data);\n            }\n            setData(constructChartData(data, caseTypes));\n        };\n        setChartData();\n    }, [caseTypes]);\n\n    const lineChartColors = {\n        cases: {\n            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--red').trim(),\n            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--red').trim() + '7d',\n        },\n        activecase: {\n            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--blue').trim(),\n            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--blue').trim() + '7d',\n        },\n        recovered: {\n            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--green').trim(),\n            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--green').trim() + '7d',\n        },\n        deaths: {\n            borderColor: getComputedStyle(document.documentElement).getPropertyValue('--black').trim(),\n            backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--black').trim() + '7d',\n        },\n    };\n\n    defaults.global.defaultFontColor = getComputedStyle(document.documentElement).getPropertyValue('--sheet-txt-c').trim();\n    defaults.global.defaultFontFamily = getComputedStyle(document.documentElement).getPropertyValue('--ff-body').trim();\n\n\n    return (\n        <div className='data-chart'>\n            <h3>{title}</h3>\n\n            { data && Object.keys(data).length > 0 && (\n                <Line\n                    data={{\n                        datasets: [{\n                                borderColor: { caseTypes } ? lineChartColors[caseTypes].borderColor : lineChartColors['cases'].borderColor,\n                                backgroundColor: { caseTypes } ? lineChartColors[caseTypes].backgroundColor : lineChartColors['cases'].backgroundColor,\n                                data: data,\n                        }],\n                    }}\n                    options={options}\n                />\n            ) }\n        </div>\n    );\n};\n\nexport default LineChart;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Card, CardContent, FormControl, Select, MenuItem } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/Info';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\n// import Tooltip from '../Tooltip/Tooltip';\nimport ThemeToggle from '../ThemeToggle/ThemeToggle';\nimport Popup from '../Popup/Popup';\nimport StatsCard from '../StatsCard/StatsCard';\nimport Map from '../Map/Map';\nimport Table from '../Table/Table';\nimport LineChart from '../LineChart/LineChart';\n\nimport { changeTheme, getData, sortData } from '../../utility/functions';\nimport { STORAGE_KEY, DATA_OBJ, COVID_URL, mapData } from '../../utility/variables';\n\nimport './App.css';\n\n\n\nconst App = () => {\n    //\n    const [theme, setTheme] = useState('light');\n    // \n    const [country, setCountry] = useState('worldwide');\n    const [countryInfo, setCountryInfo] = useState([]);\n    const [countries, setCountries] = useState([]);\n    const [tableData, setTableData] = useState([]);\n    const [caseType, setCaseType] = useState('cases');\n    // \n    const mapRef = useRef();\n    const [mapCenter, setMapCenter] = useState([mapData.initLat, mapData.initLng]);\n    const [mapCountries, setMapCountries] = useState([]);\n\n    //\n    const initTheme = () => {\n        let data = JSON.parse(localStorage.getItem(STORAGE_KEY));\n\n        if ( !data ) {\n            data = DATA_OBJ;\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\n        }\n\n        changeTheme(data.userPreferences.theme);\n        setTheme(data.userPreferences.theme);\n    }\n    const setWorldwideInfo = async () => {\n        const data = await getData(`${COVID_URL}/all`);\n        setCountryInfo(data);\n    }\n    const setCountriesInfo = async () => {\n        const data = await getData(`${COVID_URL}/countries`);\n        const countriesData = data.map( country => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n        }));\n        setCountries(countriesData);\n        setTableData(sortData(data));\n        setMapCountries(data);\n    }\n    const mapFlyTo = (center, zoom = mapData.focusZoom) => {\n        const { current = {} } = mapRef;\n        const { leafletElement: map } = current;\n    \n        map.flyTo(center, zoom, { duration: mapData.flyDuration });\n    }\n\n    useEffect(() => {\n        initTheme();\n        setWorldwideInfo();\n        setCountriesInfo();\n        \n        setMapCenter([mapData.initLat, mapData.initLng]);\n    }, []);\n\n    //\n    const countryChangeHandler = async (e) => {\n        const countryCode = e.target.value;\n        const url = countryCode === 'worldwide' ? `${COVID_URL}/all` : `${COVID_URL}/countries/${countryCode}`;\n        const data = await getData(url);\n        const [lat, lng] = data.countryInfo ? [data.countryInfo.lat, data.countryInfo.long] : [mapData.initLat, mapData.initLng];\n\n        setCountryInfo(data);\n        setCountry(countryCode);\n        if ( countryCode === 'worldwide' ) mapFlyTo([lat, lng], 2);\n        else mapFlyTo([lat, lng]);\n    };\n\n    return (\n        <>\n            <div className='app__left'>\n                <div className='app__header'>\n                    <a href={window.location.href} className='app__header--logo'>\n                        <h1>C<span className='material-icons-round'>&#xf221;</span>vid19 Data</h1>\n                    </a>\n\n                    <div className='app__header--options'>\n                        <IconButton className=\"app__header--options--btn info-btn\" aria-label=\"about this app\" >\n                            <Popup\n                                btnTip='About this application'\n                                btnContent={<InfoIcon />}\n                                modalContent={ {\n                                    title: 'About Covid19 Data App',\n                                    body: <>\n                                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Rem, molestiae pariatur ut exercitationem soluta deleniti distinctio repellendus illo, dignissimos non, earum optio necessitatibus totam facere.</p>\n                                        <div style={{textAlign: 'center', marginTop: '1rem'}}>\n                                            <a href='https://github.com/natesol/react-covid19-tracker'>\n                                                <Button\n                                                    variant='contained'\n                                                    startIcon={<GitHubIcon />}\n                                                >\n                                                    See Project On GitHub\n                                                </Button>\n                                            </a>\n                                        </div>\n                                    </>\n                                } }\n                            />\n                        </IconButton>\n\n                        <ThemeToggle theme={theme} setTheme={setTheme} />\n\n                        <FormControl>\n                            <Select value={country} variant='outlined' onChange={countryChangeHandler}>\n                                <MenuItem value='worldwide'>Worldwide</MenuItem>\n                                {countries.map( country => (\n                                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                                ))}\n                            </Select>\n                        </FormControl>\n                    </div>\n                </div>\n                <div className='app__stats'>\n                    <StatsCard\n                        country={countryInfo.country || 'worldwide'}\n                        title='Confirmed'\n                        active={caseType === 'cases'}\n                        cases={countryInfo.todayCases}\n                        total={countryInfo.cases}\n                        caseType='cases'\n                        updated={countryInfo.updated}\n                        onClick={() => setCaseType('cases')}\n                    />\n                    <StatsCard\n                        country={countryInfo.country || 'worldwide'}\n                        title='Active'\n                        active={caseType === 'activecase'}\n                        cases={countryInfo.todayCases - countryInfo.todayRecovered - countryInfo.todayDeaths}\n                        total={countryInfo.active}\n                        caseType='activecase'\n                        updated={countryInfo.updated}\n                        onClick={() => setCaseType('activecase')}\n                    />\n                    <StatsCard\n                        country={countryInfo.country || 'worldwide'}\n                        title='Recovered'\n                        active={caseType === 'recovered'}\n                        cases={countryInfo.todayRecovered}\n                        total={countryInfo.recovered}\n                        caseType='recovered'\n                        updated={countryInfo.updated}\n                        onClick={() => setCaseType('recovered')}\n                    />\n                    <StatsCard\n                        country={countryInfo.country || 'worldwide'}\n                        title='Deaths'\n                        active={caseType === 'deaths'}\n                        cases={countryInfo.todayDeaths}\n                        caseType='deaths'\n                        total={countryInfo.deaths}\n                        updated={countryInfo.updated}\n                        onClick={() => setCaseType('deaths')}\n                    />\n                </div>\n\n                <Map\n                    mapRef={mapRef}\n                    theme={theme}\n                    center={mapCenter}\n                    countries={mapCountries}\n                    caseType={caseType}\n                />\n            </div>\n\n            <Card className='app__right'>\n                <CardContent>\n                    <Table title={'Live Cases By Country'} countries={tableData} />\n\n                    <LineChart title={`New ${caseType === 'activecase' ? 'Active Cases' : caseType[0].toUpperCase()+caseType.slice(1)}`} caseTypes={caseType} />\n                </CardContent>\n            </Card>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nimport './styles/reset.css';\nimport './styles/globals.css';\nimport './styles/themes.css';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    // <App />,\n    document.getElementById('app')\n);"],"sourceRoot":""}